<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/aop
                           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- возможность использовать все остальные аннотации имеющиеся в Spring MVC -->
    <mvc:annotation-driver/>

    <!-- обрабатывает запросы наполучение статических ресурсов -->
    <mvc:resources mapping="/resources/**" location="resources/"/>

    <!-- автоматическое обнаружение контроллеров -->
    <context:component-scan base-package="ru.vsprog.springinaction.chapter8"/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- настраиваем арбитр представлений на Tiles -->
    <bean class="org.springframework.web.servlet.view.tiles2.TilesViewResolver"/>

    <bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/views/**/views.xml</value>
            </list>
        </property>
    </bean>

    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="50000"/>
    </bean>

    <bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="WEB-INF/velocity/"/>
        <property name="velocityProperties">
            <props>
                <prop key="directive.foreach.counter.name">loopCounter</prop>
                <prop key="directive.foreach.counter.initial.value">0</prop>
            </props>
        </property>
    </bean>

    <!-- viewResolver -->
    <bean id="viewResolverVelocity" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="suffix" value=".vm"/>
        <property name="dateToolAttribute" value="dateTool"/>
        <property name="numberToolAttribute" value="numberTool"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>

    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
        <property name="freemarkerSettings">
            <props>
                <prop key="template_update_delay">3600</prop>
            </props>
        </property>
    </bean>

    <!-- viewResolver -->
    <bean id="viewResolverFreeMarker" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="suffix" value=".ftl"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
    </bean>

    <bean id="rmiSpitterService" class="org.springframework.remoting.rmi.RmiProxyFactoryBean">
        <property name="serviceUrl" value="rmi://localhost/SpitterService"/>
        <property name="serviceInterface" value="ru.vsprog.springinaction.chapter8.SpitterService"/>
        
    </bean>
    
    <bean class="org.springframework.remoting.rmi.RmiServiceExporter" 
          p:service-ref="rmiSpitterService"
          p:serviceName="SpitterService"  
          p:serviceInterface="ru.vsprog.springinaction.chapter8.SpitterService"
          p:registryHost="rmi.spitter.com"
          p:registryPort="1199"/>

    <!-- компонент HessianServiceExporter экспортирует компонент
         spitterSErvice как службу Hessian
     -->
    <bean id="hessianSpitterService" class="org.springframework.remoting.caucho.HessianServiceExporter"
          p:service-ref="spitterService"
          p:serviceInterface="SpitterService"/>

    <!-- обеспечим передачу запросов компоненту hessianSpitterService -->
    <bean id="urlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings"><value>/spitter.service=hessianSpitterService</value></property>
    </bean>
    
    <!-- экспортируем службу Spitter в виде службы Burlap -->
    <bean id="burlapSpitterService" class="org.springframework.remoting.caucho.BurlapServiceExporter"
          p:service-ref="spitterService"
          p:serviceInterface="ru.vsprog.springinaction.chapter8.SpitterService"/>

    <!-- объявляем службу spitter, реализованную на основе решения Hessian -->
    <bean id="hessianSpitterSevice"
          class="org.springframework.remoting.caucho.HessianProxyFactoryBean"
          p:serviceUrl="http://localhost:8080/Sptter/spitter.service"
          p:serviceInterface="SpitterService"/>

    <!-- экпортируем компонент в виде службы Spring HTTP Invoker -->
    <bean class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"
          p:service-ref="spitterService"
          p:serviceInterface="ru.vsprog.springinaction.chapter8.SpitterService"/>

    <!-- настроим обработчик адресов URL, отображающий эти адреса на службу-->
    <bean id="httpInvokerUrlMapping" class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
        <property name="mappings" value="/spitter.service=httpInvokerSpitterService"/>
    </bean>
    
    <bean id="httpInvokerService" class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean"
          p:serviceUrl="http://localhost:8080/Sptter/spitter.service"
          p:serviceInterface="ru.vsprog.springinaction.chapter8.SpitterService"/>

    <bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter"
            p:baseAddress="http://loacalhost:8888/services/"/>

    <!-- проксирование служб JAX-WS на стороне клиента -->
    <bean id="jaxWsSpitterService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"
          p:wsdlDocumentUrl="http://localhost:8080/services/SpitterService.wsdl"
          p:serviceName="spitterService"
          p:portName="spitterServiceHttpPort"
          p:serviceInterface="ru.vsprog.springinaction.chapter8.SpitterService"
          p:namespaceUri="http://spitter.com"/>

    <!-- выбирает наиболее подходящее представление -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="mediaTypes">
            <map>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="text/xml"/>
                <entry key="htm" value="text/html"/>
            </map>
        </property>
        <property name="defaultContentType" value="text/html"/>
        <!-- запросы соответствуют типу содержимого application/json если формат со значением json -->
        <property name="favorParameter" value="true"/>
    </bean>



</beans>