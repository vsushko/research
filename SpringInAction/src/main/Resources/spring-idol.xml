<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/context"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					   http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       xmlns:p="http://www.springframework.org/schema/p"
       default-init-method="turnOnLights"
       default-destroy-method="turnOffLights">

    <bean name="duke" class="ru.vsprog.springinaction.chapter2.Juggler">
        <constructor-arg value="15"/>
    </bean>

    <bean id="sonnet29" class="ru.vsprog.springinaction.chapter2.Sonnet29"/>

    <bean id="poeticDuke" class="ru.vsprog.springinaction.chapter2.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg>
            <bean class="ru.vsprog.springinaction.chapter2.Sonnet29"/>
        </constructor-arg>
    </bean>

    <bean id="theStage" class="ru.vsprog.springinaction.chapter2.Stage" factory-method="getInstance"/>

    <bean id="ticket" class="ru.vsprog.springinaction.chapter2.Stage" scope="prototype"/>

    <bean id="auditorium" class="ru.vsprog.springinaction.chapter2.Auditorium"
          init-method="turnOnLights"
          destroy-method="turnOffLights"/>

    <bean id="saxophone" class="ru.vsprog.springinaction.chapter2.Saxophone" scope="prototype"/>

    <bean id="kenny2" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument">
            <bean class="ru.vsprog.springinaction.chapter2.Saxophone"/>
        </property>
    </bean>

    <bean id="piano" class="ru.vsprog.springinaction.chapter2.Piano"/>

    <bean id="kenny3" class="ru.vsprog.springinaction.chapter2.Instrumentalist"
          p:age="39"
          p:song="Jingle Bells"
          p:instrument-ref="saxophone" abstract="true"/>

    <bean id="hank" class="ru.vsprog.springinaction.chapter2.OneManBand">
        <property name="instruments">
            <!--<null/>-->
            <!--<list>
                <ref bean="piano"/>
                <ref bean="saxophone"/>
            </list>-->
            <!--<map>
                <entry key="Piano" value-ref="piano"/>
                <entry key="Saxophone" value-ref="saxophone"/>
            </map>-->
            <props>
                <prop key="GUITAR">strum strum strum</prop>
                <prop key="CYMBAL">crash crash crash</prop>
                <prop key="HARMONICA">hum hum hum</prop>
            </props>
        </property>
    </bean>

    <!--<bean id="carl" class="ru.vsprog.springinaction.chapter2.Instrumentalist">-->
    <!--<property name="song" value="#{kenny.song.toUpperCase()}"/>-->
    <!--<property name="pi" value="#{T(java.lang.Math).PI}"/>-->
    <!--<property name="instrument" value="#{cities[T(java.lang.Math).random() * cities.size()]}"/>-->
    <!--<property name="age" value="#{cities['Chicago'}"/>-->
    <!--</bean>-->

    <!-- создаем копонент java.util.List -->
    <util:list id="cities">
        <bean class="ru.vsprog.springinaction.chapter2.City"
              p:name="Chicago"
              p:state="IL"
              p:population="2853114"/>
    </util:list>

    <!--<util:properties id="settings" location="classpath:settings.properties"/>-->
    <!--<property name="accessToken" value="#{settings['twitter.accessToken]}"/>-->

    <!--<bean id="baseSaxophonist" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">-->
    <!--<property name="instrument" ref="saxophone"/>-->
    <!--<property name="song" value="Jingle Bells"/>-->
    <!--</bean>-->

    <!--<bean id="kenny" parent="baseSaxophonist"/>-->
    <!--<bean id="david" parent="baseSaxophonist"/>-->

    <!--<bean id="frank" parent="baseSaxophonist">-->
    <!--<property name="song" value="Mary had a little lamb"/>-->
    <!--</bean>-->

    <bean id="basePerformer" abstract="true">
        <property name="song" value="Somewhere Over the Rainbow"/>
    </bean>

    <bean id="taylor" class="ru.vsprog.springinaction.chapter2.Vocalist"
          parent="basePerformer"/>

    <bean id="harry" class="ru.vsprog.springinaction.chapter2.Magician">
        <property name="magicBox" ref="magicBox"/>
        <property name="magicWords" value="Bippity boppity boo"/>
    </bean>

    <bean id="magicBox" class="ru.vsprog.springinaction.chapter2.MagicBoxImpl">
        <replaced-method name="getContents" replacer="tigerReplacer"/>
    </bean>

    <bean id="tigerReplacer" class="ru.vsprog.springinaction.chapter2.TigerReplacer"/>

    <bean id="stevie" class="ru.vsprog.springinaction.chapter2.Instrumentalist"
          parent="basePerformer" abstract="true">
        <lookup-method name="getInstrument" bean="saxophone"/>
        <property name="song" value="Greensleeves"/>
    </bean>

    <aop:spring-configured/>

    <bean id="pianist" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">
        <property name="song" value="Cposticks"/>
        <property name="instrument">
            <bean class="ru.vsprog.springinaction.chapter2.Piano"/>
        </property>
    </bean>

    <beans>
        <bean id="infoPhone" class="ru.vsprog.springinaction.chapter3.PhoneNumber">
            <constructor-arg value="888"/>
            <constructor-arg value="555"/>
            <constructor-arg value="1212"/>
        </bean>
        <bean id="contact" class="ru.vsprog.springinaction.chapter3.Contact">
            <property name="phoneNumber" value="888-555-1212"/>
        </bean>
    </beans>

    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="ru.vsprog.springinaction.chapter3.PhoneNumber">
                    <bean id="phoneEditor" class="ru.vsprog.springinaction.chapter3.PhoneEditor"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="beanCounter" class="ru.vsprog.springinaction.chapter3.BeanCounter"/>

    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="jdbc:hsqldb:Training"/>
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="username" value="appUser"/>
        <property name="password" value="password"/>
    </bean>-->

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>jdbc.properties</value>
                <value>security.properties</value>
                <value>application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${database.url}"/>
        <property name="driverClassName" value="${database.driver}"/>
        <property name="username" value="${database.user}"/>
        <property name="password" value="${database.password}"/>
    </bean>

    <!-- интернационализация-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename">
            <value>trainingtext</value>
        </property>
    </bean>

    <bean id="refreshListener" class="ru.vsprog.springinaction.chapter3.RefreshListener"/>

    <!--<bean id="coconut" class="ru.vsprog.springinaction.chapter3.Coconut">
        <property name="lime" ref="lime"/>
    </bean>-->

    <lang:jruby id="lime" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime.rb"
                script-interfaces="ru.vsprog.springinaction.chapter3.Lime"
                refresh-check-delay="500"/>

    <lang:groovy id="groovyLime" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime.groovy"/>

    <lang:bsh id="limeBsh" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime.bsh"
              script-interfaces="ru.vsprog.springinaction.chapter3.Lime"/>

    <bean id="limePojo" class="ru.vsprog.springinaction.chapter3.LimeImpl"/>

    <lang:groovy id="coconut" script-source="ru/vsprog/springinaction/chapter3/Coconut.groovy">
        <lang:property name="lime" ref="lime"/>
    </lang:groovy>

    <lang:bsh id="limeWithInternalScript" script-interfaces="ru.vsprog.springinaction.chapter3.Lime">
        <lang:inline-script>
            <![CDATA[
                void drink() {
                    System.out.println("Called the doctor woke him up!");
                }
            ]]>
        </lang:inline-script>
    </lang:bsh>

    <bean id="kenny4" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true" autowire="byName">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument" ref="saxophone"/>
    </bean>

    <bean id="instrument" class="ru.vsprog.springinaction.chapter2.Saxophone"/>


</beans>