<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/context"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:conext="http://www.springframework.org/schema/context"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/aop
                           http://www.springframework.org/schema/tx
	   					   http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"
       xmlns:p="http://www.springframework.org/schema/p"
       default-init-method="turnOnLights"
       default-destroy-method="turnOffLights">
    <!-- default-autowire="byType" - default - none -->

    <!-- включанем связывание посредством аннотаций -->
    <conext:annotation-config/>

    <!-- включаем режим автоматического определения компонентов -->
    <context:component-scan base-package="ru.vsprog.springinaction">
        <!--<context:include-filter type="assignable" expression="javax.sound.midi.Instrument"/>-->
    </context:component-scan>

    <bean name="duke" class="ru.vsprog.springinaction.chapter2.Juggler" autowire="constructor">
        <!--<constructor-arg value="15"/>-->
    </bean>

    <bean id="sonnet29" class="ru.vsprog.springinaction.chapter2.Sonnet29"/>

    <bean id="poeticDuke" class="ru.vsprog.springinaction.chapter2.PoeticJuggler">
        <constructor-arg value="15"/>
        <constructor-arg>
            <bean class="ru.vsprog.springinaction.chapter2.Sonnet29"/>
        </constructor-arg>
    </bean>

    <bean id="theStage" class="ru.vsprog.springinaction.chapter2.Stage" factory-method="getInstance"/>

    <bean id="ticket" class="ru.vsprog.springinaction.chapter2.Stage" scope="prototype"/>

    <bean id="auditorium" class="ru.vsprog.springinaction.chapter2.Auditorium"
          init-method="turnOnLights"
          destroy-method="turnOffLights"/>

    <bean id="saxophone" class="ru.vsprog.springinaction.chapter2.Saxophone" scope="prototype"
          autowire-candidate="false"/>

    <bean id="kenny2" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument">
            <bean class="ru.vsprog.springinaction.chapter2.Saxophone"/>
        </property>
    </bean>

    <bean id="piano" class="ru.vsprog.springinaction.chapter2.Piano" autowire-candidate="false"/>

    <bean id="kenny3" class="ru.vsprog.springinaction.chapter2.Instrumentalist"
          p:age="39"
          p:song="Jingle Bells"
          p:instrument-ref="saxophone" abstract="true"/>

    <bean id="hank" class="ru.vsprog.springinaction.chapter2.OneManBand">
        <property name="instruments">
            <!--<null/>-->
            <!--<list>
                <ref bean="piano"/>
                <ref bean="saxophone"/>
            </list>-->
            <!--<map>
                <entry key="Piano" value-ref="piano"/>
                <entry key="Saxophone" value-ref="saxophone"/>
            </map>-->
            <props>
                <prop key="GUITAR">strum strum strum</prop>
                <prop key="CYMBAL">crash crash crash</prop>
                <prop key="HARMONICA">hum hum hum</prop>
            </props>
        </property>
    </bean>

    <!--<bean id="carl" class="ru.vsprog.springinaction.chapter2.Instrumentalist">-->
    <!--<property name="song" value="#{kenny.song.toUpperCase()}"/>-->
    <!--<property name="pi" value="#{T(java.lang.Math).PI}"/>-->
    <!--<property name="instrument" value="#{cities[T(java.lang.Math).random() * cities.size()]}"/>-->
    <!--<property name="age" value="#{cities['Chicago'}"/>-->
    <!--</bean>-->

    <!-- создаем копонент java.util.List -->
    <util:list id="cities">
        <bean class="ru.vsprog.springinaction.chapter2.City"
              p:name="Chicago"
              p:state="IL"
              p:population="2853114"/>
    </util:list>

    <!--<util:properties id="settings" location="classpath:settings.properties"/>-->
    <!--<property name="accessToken" value="#{settings['twitter.accessToken]}"/>-->

    <!--<bean id="baseSaxophonist" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">-->
    <!--<property name="instrument" ref="saxophone"/>-->
    <!--<property name="song" value="Jingle Bells"/>-->
    <!--</bean>-->

    <!--<bean id="kenny" parent="baseSaxophonist"/>-->
    <!--<bean id="david" parent="baseSaxophonist"/>-->

    <!--<bean id="frank" parent="baseSaxophonist">-->
    <!--<property name="song" value="Mary had a little lamb"/>-->
    <!--</bean>-->

    <bean id="basePerformer" abstract="true">
        <property name="song" value="Somewhere Over the Rainbow"/>
    </bean>

    <bean id="taylor" class="ru.vsprog.springinaction.chapter2.Vocalist"
          parent="basePerformer"/>

    <bean id="harry" class="ru.vsprog.springinaction.chapter2.Magician">
        <property name="magicBox" ref="magicBox"/>
        <property name="magicWords" value="Bippity boppity boo"/>
    </bean>

    <bean id="magicBox" class="ru.vsprog.springinaction.chapter2.MagicBoxImpl">
        <replaced-method name="getContents" replacer="tigerReplacer"/>
    </bean>

    <bean id="tigerReplacer" class="ru.vsprog.springinaction.chapter2.TigerReplacer"/>

    <bean id="stevie" class="ru.vsprog.springinaction.chapter2.Instrumentalist"
          parent="basePerformer" abstract="true">
        <!-- Ищем абстрактный метод -->
        <!--<lookup-method name="getInstrument" bean="saxophone"/>-->
        <property name="song" value="Greensleeves"/>
    </bean>

    <aop:spring-configured/>

    <bean id="pianist" class="ru.vsprog.springinaction.chapter2.Instrumentalist" abstract="true">
        <property name="song" value="Cposticks"/>
        <property name="instrument">
            <bean class="ru.vsprog.springinaction.chapter2.Piano"/>
        </property>
    </bean>


    <bean id="infoPhone" class="ru.vsprog.springinaction.chapter3.PhoneNumber">
        <constructor-arg value="888"/>
        <constructor-arg value="555"/>
        <constructor-arg value="1212"/>
    </bean>
    <bean id="contact" class="ru.vsprog.springinaction.chapter3.Contact">
        <property name="phoneNumber" value="888-555-1212"/>
    </bean>


    <bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
        <property name="customEditors">
            <map>
                <entry key="ru.vsprog.springinaction.chapter3.PhoneNumber">
                    <bean id="phoneEditor" class="ru.vsprog.springinaction.chapter3.PhoneEditor"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="beanCounter" class="ru.vsprog.springinaction.chapter3.BeanCounter"/>

    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="jdbc:hsqldb:Training"/>
        <property name="driverClassName" value="org.hsqldb.jdbcDriver"/>
        <property name="username" value="appUser"/>
        <property name="password" value="password"/>
    </bean>-->

    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>jdbc.properties</value>
                <value>security.properties</value>
                <value>application.properties</value>
            </list>
        </property>
    </bean>

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="url" value="${database.url}"/>
        <property name="driverClassName" value="${database.driver}"/>
        <property name="username" value="${database.user}"/>
        <property name="password" value="${database.password}"/>
    </bean>

    <!-- интернационализация-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename">
            <value>trainingtext</value>
        </property>
    </bean>

    <bean id="refreshListener" class="ru.vsprog.springinaction.chapter3.RefreshListener"/>

    <!--<bean id="coconut" class="ru.vsprog.springinaction.chapter3.CoconutGroovy">
        <property name="lime" ref="lime"/>
    </bean>-->

    <lang:jruby id="lime" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime.rb"
                script-interfaces="ru.vsprog.springinaction.chapter3.Lime"
                refresh-check-delay="500"/>

    <!--<lang:groovy id="groovyLime" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime1.groovy"/>-->

    <lang:bsh id="limeBsh" script-source="classpath:ru/vsprog/springinaction/chapter3/Lime.bsh"
              script-interfaces="ru.vsprog.springinaction.chapter3.Lime"/>

    <bean id="limePojo" class="ru.vsprog.springinaction.chapter3.LimeImpl"/>

    <!-- <lang:groovy id="coconut" script-source="ru/vsprog/springinaction/chapter3/CoconutGroovy.groovy">
         <lang:property name="lime" ref="lime"/>
     </lang:groovy>-->

    <lang:bsh id="limeWithInternalScript" script-interfaces="ru.vsprog.springinaction.chapter3.Lime">
        <lang:inline-script>
            <![CDATA[
                void drink() {
                    System.out.println("Called the doctor woke him up!");
                }
            ]]>
        </lang:inline-script>
    </lang:bsh>

    <bean id="kenny4" class="ru.vsprog.springinaction.chapter2.Instrumentalist"
          abstract="true"
          autowire="byName">
    <property name="song" value="Jingle Bells"/>
    </bean>

    <bean id="instrument" class="ru.vsprog.springinaction.chapter2.Saxophone" autowire-candidate="false"/>

    <bean id="kenny5" class="ru.vsprog.springinaction.chapter2.Instrumentalist" autowire="byType" abstract="true">
        <property name="song" value="Jingle Bells"/>
        <property name="instrument">
            <null/>
        </property>
    </bean>

    <!--<bean class="ru.vsprog.springinaction.chapter2.Guitar">
        <qualifier value="stringed"/>
    </bean>-->

    <bean id="knife" class="ru.vsprog.springinaction.chapter4.Knife" scope="prototype"/>

    <!-- Глава с AOP -->
    <bean id="audience" class="ru.vsprog.springinaction.chapter5.Audience"/>

    <aop:config>
        <!-- ссылка на компонент audience -->
        <aop:aspect ref="audience">

            <aop:pointcut id="performance"
                          expression="execution(* ru.vsprog.springinaction.chapter2.Performer.perform(..))"/>

            <!-- Перед выступлением -->
            <aop:before pointcut="performance" method="takeSeats" />

            <!-- Перед выступлением -->
            <aop:before pointcut="performance" method="turnOffCellPhones" />

            <!-- Перед выступлением -->
            <aop:after-returning pointcut="performance" method="applaud" />

            <!-- После неудачного выступления -->
            <aop:after-throwing pointcut="performance" method="demandRefund" />
        </aop:aspect>
    </aop:config>

    <aop:config>
        <aop:aspect ref="magician">
            <aop:pointcut id="thinking"
                          expression="execution(* ru.vsprog.springinaction.chapter5.Thinker.thinkOfSomething(String))
                          and args(thoughts)" />
            <aop:before pointcut-ref="thinking"
                        method="interceptThoughts"
                        arg-names="thoughts" />
        </aop:aspect>
    </aop:config>

    <aop:aspect>
        <aop:declare-parents
            types-matching="ru.vsprog.springinaction.chapter2.Performer+"
            implement-interface="ru.vsprog.springinaction.chapter5.Contestant"
            default-impl="ru.vsprog.springinaction.chapter5.GraciousContestant"/>
    </aop:aspect>

    <aop:declare-parents
            types-matching="ru.vsprog.springinaction.chapter2.Performer+"
            implement-interface="ru.vsprog.springinaction.chapter5.Contestant"
            delegate-ref="contestantDelegate">
    </aop:declare-parents>

    <bean id="contestantDelegate" class="ru.vsprog.springinaction.chapter5.GraciousContestant"/>

    <!--<bean id="audience" class="ru.vsprog.springinaction.chapter5.Audience"/>-->

    <!-- элемент создаст в контексте Spring компонент класса AnnotationAwareAspectJAutoProxyCreator и
         автоматически выполнит проксирование компонентов, имеющих методы, совпадающие с объявлениями точек
         сопряжения в аннотациях @Pointcut, которые присутствуют в компонентах, отмеченных аннотацией @Aspect
    -->
    <aop:aspectj-autoproxy/>

    <bean class="ru.vsprog.springinaction.chapter5.ContestantIntroducer"/>

    <bean id="criticismEngine" class="ru.vsprog.springinaction.chapter5.CriticismEngineImpl">
        <property name="criticismPool">
            <list>
                <value>I'm not being rude, but that was appaling.</value>
                <value>You may be the least talented person in this show</value>
                <value>Do everyone a favor and keep your day job.</value>
            </list>
        </property>
    </bean>

    <bean class="ru.vsprog.springinaction.chapter5.JudgeAspect" factory-method="aspectOf">
        <!--<property name="criticismEngine" ref="criticismEngine"/>-->
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.simple.SimpleJdbcTemplate">
        <constructor-arg type="javax.sql.DataSource" ref="dataSource"/>
    </bean>

    <bean id="spitterDao" class="ru.vsprog.springinaction.chapter6.SimpleJdbcTemplateSpitterDao">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mappingResources">
            <list>
                <!--<value>Spitter.hbm.xml</value>-->
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="dialect">org.hibernate.dialect.HSQLDialect</prop>
            </props>
        </property>
    </bean>

    <!-- преобразование исключений без применения класса шаблона поддержки Hibernate
         перехватывает все исключения и преобразовывает их в неконтролируемые исключения Spring -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

    <bean id="spitterService" class="ru.vsprog.springinaction.chapter7.SpitterSeviceImpl">
        <property name="transactionTemplate">
            <bean class="org.springframework.transaction.support.TransactionTemplate">
                <property name="transactionManager" ref="transactionManager"/>
            </bean>
        </property>
    </bean>
    <bean id="transactionManager"/>

    <tx:advice id="txAdvice">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- для аннотации @EJB -->
    <bean class="org.springframework.jee.config.JeeBeanFactoryPostProcessor"/>

    <bean id="knight" class="ru.vsprog.springinaction.chapter16.BraveKnight">
        <constructor-arg value="Bedivere"/>
    </bean>

    <bean id="quest" class="ru.vsprog.springinaction.chapter1.SlayDragonQuest"/>

    <bean id="defaultConfiguration" class="java.util.Properties"/>

    <!-- включаем переменные заполнители -->
    <aop:property-placeholder location="classpath:/application.properties"/>
    <aop:property-placeholder location="file:///etc/db.properties"/>

    <!-- Получение значений из системных свойств -->
    <aop:property-placeholder
            location="file:///etc/db.properties"
            ignore-resource-not-found="true"
            ignore-unresolvable="true"
            properties-ref="defaultConfiguration"
            system-properties-mode="OVERRIDE"/>

    <!-- для переопределения свойств -->
    <aop:property-override/>

    <bean class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
        <property name="location" value="jdbc.properties"/>
        <constructor-arg ref="stringEncrypter"/>
    </bean>

    <bean id="stringEncrypter" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
        <property name="config" ref="environmentConfig"/>
    </bean>

    <bean id="environmentConfig" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
        <property name="algorithm" value="PBEWithMD4AndDES"/>
        <property name="passwordEnvName" value="DB_ENCRYPTION_PWD"/>
    </bean>


</beans>