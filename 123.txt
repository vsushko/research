 /*
        XSOMParser parser = new XSOMParser();

        ErrorHandler eh = new SAXParserHandler();

        parser.setErrorHandler(eh);
        parser.setEntityResolver((EntityResolver) eh);

        parser.parse(new File("ru/acs/fts/albumdoc/schemas/af542/BankGuaranteeTotalAmount.xsd"));

        XSSchemaSet result = parser.getResult();
        if (result == null) {
            System.out.println(eh.toString());
        }

        // iterate each XSSchema object. XSSchema is a per-namespace schema.
        Iterator itr = result.iterateSchema();
        while( itr.hasNext() ) {
            XSSchema s = (XSSchema)itr.next();

            System.out.println("Target namespace: "+s.getTargetNamespace());

            Iterator jtr = s.iterateElementDecls();
            while( jtr.hasNext() ) {
                XSElementDecl e = (XSElementDecl)jtr.next();

                System.out.print( e.getName() );
                if( e.isAbstract() )
                    System.out.print(" (abstract)");
                System.out.println();
            }
        }*/	
		
		
		
		package ru.acs.fts.schemaanalyzer;

import com.predic8.schema.Schema;
import com.predic8.schema.SchemaParser;
import com.predic8.schema.diff.SchemaDiffGenerator;
import com.predic8.soamodel.Difference;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.util.List;

/**
 * Created by vsa
 * Date: 11.11.14.
 */
public class Main {
    private static final String PATH_TO_5_4_2 = "C:\\workprojects\\SchemesAnalyzer\\src\\main\\Resources\\albumdoc\\schemas\\af542\\";
    private static final String PATH_TO_5_4_3 = "C:\\workprojects\\SchemesAnalyzer\\src\\main\\Resources\\albumdoc\\schemas\\af543\\";

    public static void main(String[] args) throws SAXException, IOException {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        SchemaInfoProvider provider = (SchemaInfoProvider) context.getBean("schemas");

        for (int i = 0; i < provider.getCountOfSchemas(); i++) {
            System.out.println("Analyzing different with: " + provider.getSchemaName(i));

            SchemaParser parser = new SchemaParser();
            Schema schema1 = parser.parse(PATH_TO_5_4_2 + provider.getSchemaName(i));
            Schema schema2 = parser.parse(PATH_TO_5_4_3 + provider.getSchemaName(i));

            SchemaDiffGenerator diffGen = new SchemaDiffGenerator(schema1, schema2);
            List<Difference> lst = diffGen.compare();

            if (lst.isEmpty()) {
                System.out.println("NOT FOUND...");
            } else {
                for (Difference diff : lst) {
                    System.out.println(diff.dump());
                }
            }
        }
    }
}



public class Main {
    private static final String PATH_TO_5_4_2 = "C:\\workprojects\\SchemesAnalyzer\\src\\main\\Resources\\albumdoc\\schemas\\af542\\";
    private static final String PATH_TO_5_4_3 = "C:\\workprojects\\SchemesAnalyzer\\src\\main\\Resources\\albumdoc\\schemas\\af543\\";

    public static void main(String[] args) throws SAXException, IOException {
        ApplicationContext context = new ClassPathXmlApplicationContext("applicationContext.xml");
        SchemaInfoProvider provider = (SchemaInfoProvider) context.getBean("schemas");

        for (int i = 0; i < provider.getCountOfSchemas(); i++) {
            SchemaParser parser = new SchemaParser();
            Schema schema1 = parser.parse(PATH_TO_5_4_2 + provider.getSchemaName(i));
            Schema schema2 = parser.parse(PATH_TO_5_4_3 + provider.getSchemaName(i));

            SchemaDiffGenerator diffGen = new SchemaDiffGenerator(schema1, schema2);
            List<Difference> lst = diffGen.compare();

            if (!lst.isEmpty()) {
//                System.out.println("Differences were found in the scheme called: " + provider.getSchemaName(i));
                for (Difference diff : lst) {
                    System.out.println(diff.dump());
                }
            }
        }
    }
}
